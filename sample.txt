import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class TienDien {
public static class ElectricityMapper extends Mapper<Object, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);
        private Text year = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException   
 {
            String[] line = value.toString().split("\t");   

            year.set(line[0]);
            int consumption = Integer.parseInt(line[13]); // Assuming the last column is the average consumption
            if (consumption > 30) {
                context.write(year, one);
            }
        }
    }

    public static class ElectricityReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int sum = 0;
            for (IntWritable   
 val : values) {
                sum += val.get();
            }
            context.write(key, new IntWritable(sum));
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job   
 = Job.getInstance(conf, "Electricity Consumption");
        job.setJarByClass(ElectricityConsumption.class);
        job.setMapperClass(ElectricityMapper.class);
        job.setCombinerClass(ElectricityReducer.class);
        job.setReducerClass(ElectricityReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);   

        TextInputFormat.setInputPaths(job, new Path(args[0]));
        TextOutputFormat.setOutputPath(job, new Path(args[1]));
        System.exit(job.waitForCompletion(true)   
 ? 0 : 1);
    }
}
